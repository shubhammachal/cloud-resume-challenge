#JS 
(function($) {
  "use strict"; // Start of use strict

  // Smooth scrolling using jQuery easing
  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html, body').animate({
          scrollTop: (target.offset().top)
        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  });

  // Closes responsive menu when a scroll trigger link is clicked
  $('.js-scroll-trigger').click(function() {
    $('.navbar-collapse').collapse('hide');
  });

  // Activate scrollspy to add active class to navbar items on scroll
  $('body').scrollspy({
    target: '#sideNav'
  });

  // Visitor counter functionality
  async function updateVisitorCount() {
    try {
      // Replace with your actual API Gateway URL for the put function
      const putResponse = await fetch('https://fbrof3gjqk.execute-api.us-east-1.amazonaws.com/Prod/put');
      const putData = await putResponse.json();
      
      if (putData.count) {
        // Update the visitor count on the webpage
        document.getElementById('visitor-count').textContent = putData.count;
      }
    } catch (error) {
      console.error('Error updating visitor count:', error);
    }
  }

  // Call the visitor counter function when the page loads
  document.addEventListener('DOMContentLoaded', updateVisitorCount);

})(jQuery); // End of use strict

#get
# get-function/app.py
import json
import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('cloud-resume-challenge')

def lambda_handler(event, context):
    try:
        logger.info(f"Received event: {json.dumps(event)}")
        
        # Get the current count from DynamoDB
        response = table.get_item(
            Key={
                'ID': 'visitors'
            }
        )
        
        # Get count or default to 0 if not found
        count = response.get('Item', {}).get('count', 0)
        
        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "*",
                "Access-Control-Allow-Headers": "*",
                "Content-Type": "application/json"
            },
            "body": json.dumps({
                "count": str(count)
            })
        }
    
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "*",
                "Access-Control-Allow-Headers": "*",
                "Content-Type": "application/json"
            },
            "body": json.dumps({
                "error": "Internal Server Error",
                "details": str(e)
            })
        }



#put
import json
import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('cloud-resume-challenge')

def lambda_handler(event, context):
    try:
        logger.info(f"Received event: {json.dumps(event)}")
        
        # Use atomic counter to increment the count
        response = table.update_item(
            Key={
                'ID': 'visitors'
            },
            UpdateExpression='SET #count = if_not_exists(#count, :zero) + :inc',
            ExpressionAttributeNames={
                '#count': 'count'
            },
            ExpressionAttributeValues={
                ':inc': 1,
                ':zero': 0
            },
            ReturnValues='UPDATED_NEW'
        )
        
        # Get the new count from the response
        new_count = response['Attributes']['count']
        
        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "*",
                "Access-Control-Allow-Headers": "*",
                "Content-Type": "application/json"
            },
            "body": json.dumps({
                "count": str(new_count)
            })
        }
    
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "*",
                "Access-Control-Allow-Headers": "*",
                "Content-Type": "application/json"
            },
            "body": json.dumps({
                "error": "Internal Server Error",
                "details": str(e)
            })
        }